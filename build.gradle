// For those who want the bleeding edge
buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.7"

}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'idea'

repositories {
    maven {
        name = "forge"
        url = "http://files.minecraftforge.net/maven"
    }
    // One Probe API
    maven {
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
    // JEI API
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url =  "http://dvs1.progwml6.com/files/maven"
    }
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://tehnut.info/maven"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        url "http://modmaven.k-4u.nl/"
    }
}

dependencies {
//    deobfCompile "mcjty.theoneprobe:TheOneProbe:${top_version}"
//    deobfCompile "com.github.mcjty:compatlayer:${minecraft_version}-${compatlayer_version}"
    // compile against the JEI API
    deobfCompile "mezz.jei:jei_${minecraft_version}:${jei_version}:api"
    // at runtime, use the full JEI jar
    runtime "mezz.jei:jei_${minecraft_version}:${jei_version}"

}

version = "${project_version}"
group = "${project_group}"
archivesBaseName = "${project_archivesBaseName}-" + minecraft_version

sourceCompatibility = targetCompatibility = 1.8

minecraft {
    version = "${minecraft_version}-${forge_version}"
    mappings = "${forge_mappings}"
    runDir = "run"

    useDepAts = true

    replace "@VERSION@", project.version

    replaceIn "reference/Reference.java"
    replaceIn "package-info.java"
}


processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version': project.version, 'mcversion': project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

jar {
    version = project.minecraft.version + "-" + project.version
    destinationDir = file (rootProject.getRootDir().getPath() + '/output')
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    destinationDir = file (rootProject.getRootDir().getPath() + '/output')
}

task sourcesJar(type: Jar, dependsOn: 'sourceMainJava') {
    from "build/sources/main"
    from "build/resources/main"
    classifier "sources"
    destinationDir = file (rootProject.getRootDir().getPath() + '/output')
}

task apiJar(type: Jar, dependsOn: 'sourceMainJava') {
    from sourceSets.main.allSource
    from sourceSets.main.output
    include "${project_group}/api/**/*"
    classifier 'api'
    destinationDir = file (rootProject.getRootDir().getPath() + '/output')
}

curseforge {
    apiKey = System.getenv().CURSE_API_KEY == null ? '0' : System.getenv().CURSE_API_KEY
    project {
        id = project.curse_projectId
        releaseType = 'alpha'
        changelog = file('changelog.txt')
        addGameVersion project.minecraft.version
        mainArtifact (jar) {
            displayName = "${jar.archiveName}".replace(".jar", "")
            relations {
                requiredLibrary 'just-enough-items-jei'
            }
        }

//      maybe I will upload a source jar later, so I will leave this in here.

//      addArtifact (deobfJar) {
//          displayName = "${deobfJar.archiveName}".replace(".jar", "")
//      }
//      addArtifact (sourcesJar) {
//          displayName = "${sourcesJar.archiveName}".replace(".jar", "")
//      }
//      addArtifact (apiJar) {
//          displayName = "${apiJar.archiveName}".replace(".jar", "")
//      }
    }
}